services:
  traefik:
    container_name: traefik
    image: traefik:v2.10
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:8081"
    ports:
      - "8081:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - observability-network

  service1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ${SERVICE1_NAME}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.service1.rule=PathPrefix(`/service1`)"
      - "traefik.http.routers.service1.entrypoints=web"
      - "traefik.http.routers.service1.middlewares=strip-service1-prefix"
      - "traefik.http.middlewares.strip-service1-prefix.stripprefix.prefixes=/service1"
      - "traefik.http.services.service1.loadbalancer.server.port=8080"
    environment:
      - SERVICE_NAME=${SERVICE1_NAME}
      - SERVICE_CALL_URL=${SERVICE2_CALL_URL}
    networks:
      - observability-network

  service2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ${SERVICE2_NAME}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.service2.rule=PathPrefix(`/service2`)"
      - "traefik.http.routers.service2.entrypoints=web"
      - "traefik.http.routers.service2.middlewares=strip-service2-prefix"
      - "traefik.http.middlewares.strip-service2-prefix.stripprefix.prefixes=/service2"
      - "traefik.http.services.service2.loadbalancer.server.port=8080"
    environment:
      - SERVICE_NAME=${SERVICE2_NAME}
      - SERVICE_CALL_URL=${SERVICE3_CALL_URL}
    networks:
      - observability-network

  service3:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ${SERVICE3_NAME}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.service3.rule=PathPrefix(`/service3`)"
      - "traefik.http.routers.service3.entrypoints=web"
      - "traefik.http.routers.service3.middlewares=strip-service3-prefix"
      - "traefik.http.middlewares.strip-service3-prefix.stripprefix.prefixes=/service3"
      - "traefik.http.services.service3.loadbalancer.server.port=8080"
    environment:
      - SERVICE_NAME=${SERVICE3_NAME}
    networks:
      - observability-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./config-files/prometheus.yaml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - observability-network

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./config-files/tempo.yaml:/etc/tempo.yaml
      - tempo_data:/tmp/tempo
    ports:
      - "3200:3200"
      - "4319:4319"
    networks:
      - observability-network

  loki:
    image: grafana/loki:latest
    container_name: loki
    volumes:
      - ./config-files/loki.yaml:/etc/loki/loki-config.yaml
      - loki_data:/loki
    ports:
      - "3100:3100"
    networks:
      - observability-network

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    volumes:
      - ./config-files/otel.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317" 
      - "4318:4318"
      - "8888:8888"
      - "8889:8889"
    networks:
      - observability-network
    depends_on:
      - tempo
      - loki
      - prometheus

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
      - tempo
      - loki
    networks:
      - observability-network


networks:
  observability-network:
    driver: bridge

volumes:
  prometheus_data:
  tempo_data:
  loki_data:
  grafana_data: